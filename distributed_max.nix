# Generated by carnix 0.6.6: carnix -o distributed_max.nix --src ./. Cargo.lock --standalone
with import <nixpkgs> {};
let kernel = buildPlatform.parsed.kernel.name;
    abi = buildPlatform.parsed.abi.name;
    include = includedFiles: src: builtins.filterSource (path: type:
      lib.lists.any (f:
        let p = toString (src + ("/" + f)); in
        (path == p) || (type == "directory" && lib.strings.hasPrefix path p)
      ) includedFiles
    ) src;
    updateFeatures = f: up: functions: builtins.deepSeq f (lib.lists.foldl' (features: fun: fun features) (lib.attrsets.recursiveUpdate f up) functions);
    mapFeatures = features: map (fun: fun { features = features; });
    mkFeatures = feat: lib.lists.foldl (features: featureName:
      if feat.${featureName} or false then
        [ featureName ] ++ features
      else
        features
    ) [] (builtins.attrNames feat);
in
rec {
  distributed_max = f: distributed_max_0_1_0 { features = distributed_max_0_1_0_features { distributed_max_0_1_0 = f; }; };
  bitflags_1_0_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bitflags";
    version = "1.0.4";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1g1wmz2001qmfrd37dnd5qiss5njrw26aywmg6yhkmkbyrhjxb08";
    inherit dependencies buildDependencies features;
  };
  distributed_max_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "distributed_max";
    version = "0.1.0";
    authors = [ "pfalzgraf <pfalzgraf@drmartin.com>" ];
    src = ./.;
    inherit dependencies buildDependencies features;
  };
  fuchsia_zircon_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-zircon";
    version = "0.3.3";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "0jrf4shb1699r4la8z358vri8318w4mdi6qzfqy30p2ymjlca4gk";
    inherit dependencies buildDependencies features;
  };
  fuchsia_zircon_sys_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-zircon-sys";
    version = "0.3.3";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "08jp1zxrm9jbrr6l26bjal4dbm8bxfy57ickdgibsqxr1n9j3hf5";
    inherit dependencies buildDependencies features;
  };
  libc_0_2_43_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libc";
    version = "0.2.43";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0pshydmsq71kl9276zc2928ld50sp524ixcqkcqsgq410dx6c50b";
    inherit dependencies buildDependencies features;
  };
  rand_0_4_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand";
    version = "0.4.3";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1644wri45l147822xy7dgdm4k7myxzs66cb795ga0x7dan11ci4f";
    inherit dependencies buildDependencies features;
  };
  winapi_0_3_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi";
    version = "0.3.5";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0cfdsxa5yf832r5i2z7dhdvnryyvhfp3nb32gpcaq502zgjdm3w6";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_i686_pc_windows_gnu_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "05ihkij18r4gamjpxj4gra24514can762imjzlmak5wlzidplzrp";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_x86_64_pc_windows_gnu_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0n1ylmlsb8yg1v583i4xy0qmqg42275flvbc51hdqjjfjcl9vlbj";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  bitflags_1_0_4 = { features?(bitflags_1_0_4_features {}) }: bitflags_1_0_4_ {
    features = mkFeatures (features.bitflags_1_0_4 or {});
  };
  bitflags_1_0_4_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = (f.bitflags_1_0_4.default or true);
  }) [];
  distributed_max_0_1_0 = { features?(distributed_max_0_1_0_features {}) }: distributed_max_0_1_0_ {
    dependencies = mapFeatures features ([ rand_0_4_3 ]);
  };
  distributed_max_0_1_0_features = f: updateFeatures f (rec {
    distributed_max_0_1_0.default = (f.distributed_max_0_1_0.default or true);
    rand_0_4_3.default = true;
  }) [ rand_0_4_3_features ];
  fuchsia_zircon_0_3_3 = { features?(fuchsia_zircon_0_3_3_features {}) }: fuchsia_zircon_0_3_3_ {
    dependencies = mapFeatures features ([ bitflags_1_0_4 fuchsia_zircon_sys_0_3_3 ]);
  };
  fuchsia_zircon_0_3_3_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = true;
    fuchsia_zircon_0_3_3.default = (f.fuchsia_zircon_0_3_3.default or true);
    fuchsia_zircon_sys_0_3_3.default = true;
  }) [ bitflags_1_0_4_features fuchsia_zircon_sys_0_3_3_features ];
  fuchsia_zircon_sys_0_3_3 = { features?(fuchsia_zircon_sys_0_3_3_features {}) }: fuchsia_zircon_sys_0_3_3_ {};
  fuchsia_zircon_sys_0_3_3_features = f: updateFeatures f (rec {
    fuchsia_zircon_sys_0_3_3.default = (f.fuchsia_zircon_sys_0_3_3.default or true);
  }) [];
  libc_0_2_43 = { features?(libc_0_2_43_features {}) }: libc_0_2_43_ {
    features = mkFeatures (features.libc_0_2_43 or {});
  };
  libc_0_2_43_features = f: updateFeatures f (rec {
    libc_0_2_43.default = (f.libc_0_2_43.default or true);
    libc_0_2_43.use_std =
      (f.libc_0_2_43.use_std or false) ||
      (f.libc_0_2_43.default or false) ||
      (libc_0_2_43.default or false);
  }) [];
  rand_0_4_3 = { features?(rand_0_4_3_features {}) }: rand_0_4_3_ {
    dependencies = (if kernel == "fuchsia" then mapFeatures features ([ fuchsia_zircon_0_3_3 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ ]
      ++ (if features.rand_0_4_3.libc or false then [ libc_0_2_43 ] else [])) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_5 ]) else []);
    features = mkFeatures (features.rand_0_4_3 or {});
  };
  rand_0_4_3_features = f: updateFeatures f (rec {
    fuchsia_zircon_0_3_3.default = true;
    libc_0_2_43.default = true;
    rand_0_4_3.default = (f.rand_0_4_3.default or true);
    rand_0_4_3.i128_support =
      (f.rand_0_4_3.i128_support or false) ||
      (f.rand_0_4_3.nightly or false) ||
      (rand_0_4_3.nightly or false);
    rand_0_4_3.libc =
      (f.rand_0_4_3.libc or false) ||
      (f.rand_0_4_3.std or false) ||
      (rand_0_4_3.std or false);
    rand_0_4_3.std =
      (f.rand_0_4_3.std or false) ||
      (f.rand_0_4_3.default or false) ||
      (rand_0_4_3.default or false);
    winapi_0_3_5.default = true;
    winapi_0_3_5.minwindef = true;
    winapi_0_3_5.ntsecapi = true;
    winapi_0_3_5.profileapi = true;
    winapi_0_3_5.winnt = true;
  }) [ fuchsia_zircon_0_3_3_features libc_0_2_43_features winapi_0_3_5_features ];
  winapi_0_3_5 = { features?(winapi_0_3_5_features {}) }: winapi_0_3_5_ {
    dependencies = (if kernel == "i686-pc-windows-gnu" then mapFeatures features ([ winapi_i686_pc_windows_gnu_0_4_0 ]) else [])
      ++ (if kernel == "x86_64-pc-windows-gnu" then mapFeatures features ([ winapi_x86_64_pc_windows_gnu_0_4_0 ]) else []);
    features = mkFeatures (features.winapi_0_3_5 or {});
  };
  winapi_0_3_5_features = f: updateFeatures f (rec {
    winapi_0_3_5.default = (f.winapi_0_3_5.default or true);
    winapi_i686_pc_windows_gnu_0_4_0.default = true;
    winapi_x86_64_pc_windows_gnu_0_4_0.default = true;
  }) [ winapi_i686_pc_windows_gnu_0_4_0_features winapi_x86_64_pc_windows_gnu_0_4_0_features ];
  winapi_i686_pc_windows_gnu_0_4_0 = { features?(winapi_i686_pc_windows_gnu_0_4_0_features {}) }: winapi_i686_pc_windows_gnu_0_4_0_ {};
  winapi_i686_pc_windows_gnu_0_4_0_features = f: updateFeatures f (rec {
    winapi_i686_pc_windows_gnu_0_4_0.default = (f.winapi_i686_pc_windows_gnu_0_4_0.default or true);
  }) [];
  winapi_x86_64_pc_windows_gnu_0_4_0 = { features?(winapi_x86_64_pc_windows_gnu_0_4_0_features {}) }: winapi_x86_64_pc_windows_gnu_0_4_0_ {};
  winapi_x86_64_pc_windows_gnu_0_4_0_features = f: updateFeatures f (rec {
    winapi_x86_64_pc_windows_gnu_0_4_0.default = (f.winapi_x86_64_pc_windows_gnu_0_4_0.default or true);
  }) [];
}
